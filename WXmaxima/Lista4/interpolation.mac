

estimativaNG(dados,p,chi,f):=block(n:length(dados),
ratprint:false,

define(s(x),factor(diff(f(x),x,n))), 

j:create_list(ev(abs(s(x)),x=dados[i,1]),i,1,length(dados)),

M:lmax(j),

print("Limitante:"),

print('abs(E(chi)) <=float(product(abs(chi-dados[i,1]),i,1,length(dados))*M/(n)!)))$

NewtonGregory(dados,chi,f):=block(kill(p1,Q,tabela,soma,soma2,L),
print("Diretório:", maxima_tempdir), print("Data e hora atual:", timedate()),
             print(""),
        print("Interpolação de Newton-Gregory:"),
        M:matrix(['x,'f(x)]),
print(transpose(addrow(M,dados))),
n:length(dados), tabela:copymatrix(dados),
Q:makelist(1/((dados[2,1]-dados[1,1])^(i-1)*((i-1)!)),i,1,length(dados)),
for i:1 thru n-1 do (

    tabela:addcol(tabela,zeromatrix(n,1)),

    for j:1 thru n-i do (

         tabela[j,i+2]:(tabela[j+1,i+1]-tabela[j,i+1])

    )

),
delta1(i):=if i=0 then 'x_k else (if i=1 then Delta^"0" else Delta^(i-1)),
        Q1:makelist([delta1(i)],i,0,length(dados)),
        Q3:transpose(apply('matrix,Q1)),
        
print("Tabela:"),

print(addrow(Q3,tabela)),

soma:0,
for i:1 thru n do (
    soma2:1,
    for j:1 thru i-1 do(
        soma2:soma2*(x-tabela[j,1])
    ),   soma:soma+Q[i]*tabela[1,i+1]*(soma2)),
    

L(x):=''soma,
print(" "),
print("Polinômio interpolador:"),
print(" "),
print(" p(x)=", (L(x))," = ", box(expand(L(x))) ),
define(p1(x),L(x)),
print(" "),
print("Polinômio interpolador avaliado em x=", chi, "é"," ", 'p(chi)=float(ev(soma, x=(chi)))),
print(" "),
if f=0 then print( ) else (estimativaNG(dados,p1,chi,f)),
define(p1(x),L(x)))$



Newton(dados,chi,f):=block(kill(p,L,soma,soma2,tabela,Q1,Q2,Q3,n),
    print("Diretório:", maxima_tempdir), print("Data e hora atual:", timedate()),
             print(""),
        print("Interpolação de Newton da tabela:"),
        print(""),
        M:matrix(['x,'f(x)]),
print(transpose(addrow(M,dados))),
    print(""),

n:length(dados), tabela:copymatrix(dados),

for i:1 thru n-1 do (
    tabela:addcol(tabela,zeromatrix(n,1)),
    for j:1 thru n-i do (
         tabela[j,i+2]:(tabela[j+1,i+1]-tabela[j,i+1])/(tabela[j+i,1]-tabela[j,1])
    )
),

Q1:makelist(["Ordem"(i-1)],i,1,n),

        
        Q3:addcol(matrix(['x_k]),(apply('matrix,Q1))),
        
print("Tabela:"),
    print(""),

print(addrow(Q3,tabela)),
    
    print(""),


soma:0,
for i:1 thru n do (
    soma2:1,
    for j:1 thru i-1 do(
        soma2:soma2*(x-tabela[j,1])
    ),
    soma:soma+tabela[1,i+1]*soma2
),

print(" "),

print("Polinômio interpolador p(x)=", expand(soma) ),
print(" "),
print("Polinômio interpolador avaliado em x=", chi, "é"," ", 'p(chi)=float(ev(soma,x=chi))),
print(" "),
if f=0 then print( ) else (estimativaNG(dados,soma,chi,f)))$

graficopN(dados,chi):=block(print("Diretório:", maxima_tempdir),
define(L(x),ev(soma,x=x)),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],L(dados[i,1])],i,1,length(dados)),
    estimativa:[[chi,L(chi)]],
obj_list: [[discrete,Xx],L(x),[discrete,estimativa]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],
[style, points, lines,points], [color, red, blue,green],
        [point_type, asterisk,bullet], 
        [legend, "Pontos da Tabela", "Polinômio Interpolador P(x)","Estimativa"],
        [title, "Diferenças Divididas de Newton"]))$

graficopNG(dados,chi):=block(print("Diretório:", maxima_tempdir),
define(L(x),ev(soma,x=x)),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],L(dados[i,1])],i,1,length(dados)),
    estimativa:[[chi,L(chi)]],
obj_list: [[discrete,Xx],L(x),[discrete,estimativa]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],
[style, points, lines,points], [color, red, blue,green],
        [point_type, asterisk,bullet], 
        [legend, "Pontos da Tabela", "Polinômio Interpolador P(x)","Estimativa"],
        [title, "Diferenças Finitas: Fórmula de Newton - Grégory"]))$



graficopfN(dados,chi):=block(print("Diretório:", maxima_tempdir),
define(L(x),ev(soma,x=x)),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],L(dados[i,1])],i,1,length(dados)),
    estimativa:[[chi,L(chi)]], estimativa1:[[chi,f(chi)]],
obj_list: [[discrete,Xx],L(x),f(x),[discrete,estimativa],[discrete, estimativa1]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],
[style, points, lines,lines, points], [color, red, blue,green,yellow,black],
        [point_type, asterisk,bullet], 
        [legend, "Pontos da Tabela", "Polinômio Interpolador P(x)", "Função f(x)","Estimativa","Valor Exato"],
        [title, "Diferenças Divididas de Newton"]))$

graficopfNG(dados,chi):=block(print("Diretório:", maxima_tempdir),
define(L(x),ev(soma,x=x)),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],L(dados[i,1])],i,1,length(dados)),
    estimativa:[[chi,L(chi)]], estimativa1:[[chi,f(chi)]],
obj_list: [[discrete,Xx],L(x),f(x),[discrete,estimativa],[discrete,estimativa1]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],['y,min(f(xmin),f(chi))-.5,max(f(xmax),f(chi))+1],
[style, points, lines,lines,points,points], [color, red, blue,green,black,yellow],
        [point_type, asterisk,bullet], 
        [legend, "Pontos da Tabela", "Polinômio Interpolador P(x)","Função f(x)","Estimativa", "Valor Exato"],
        [title, "Diferenças Finitas: Fórmula de Newton - Grégory"]))$


Lagrange(dados,chi,f):=block(kill(S,y,L,p),
    print("Diretório:", maxima_tempdir), print("Data e hora atual:", timedate()),
             print(""),
        print("Interpolação de Lagrange da tabela:"),
        M:matrix(['x,'f(x)]),
print(transpose(addrow(M,dados))),
n:length(dados),
    print(""),
print("Polinômios coeficientes:"),
for i:1 thru n do(
S[i]:product(if equal(dados[i,1],dados[j,1]) then 1
 else (x-dados[j,1])/(dados[i,1]-dados[j,1]), j, 1, n),
print('L[i-1](x)=S[i],"=",expand(S[i]))),
y:0, 
for i:1 thru n do (
y:y+dados[i,2]*S[i]),
L(x):=''y,
print(" "),
print("Polinômio interpolador de Lagrange: p(x)=", expand(L(x)) ),
print(" "),

print("Polinômio interpolador avaliado em x=", chi, "é"," ", 'p(chi)=float(ev(y,x=chi))),
print(" "),
if f=0 then print( ) else (estimativaNG(dados,p,chi,f)),
define(p(x),L(x)))$

plotL(dados):=(WW:makelist(S[i],i,1,n),
    plot2d(WW,[x,dados[1,1]-.5,dados[length(dados),1]+.5], 
    [xtics,dados[1,1]]))$




graficopL(dados,chi):=block(print("Diretório:", maxima_tempdir),
print(" "),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],p(dados[i,1])],i,1,length(dados)),
    estimativa:[[chi,p(chi)]],
obj_list: [[discrete,Xx],p(x),[discrete,estimativa]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],
[style, points, lines,points], [color, red, blue,green],
        [point_type, asterisk,bullet], 
        [legend, "Pontos da Tabela", "Polinômio Interpolador P(x)","Estimativa"],
        [title, "Interpolação de Lagrange"]))$


graficopfL(dados,f,chi):=block(print("Diretório:", maxima_tempdir),
print(" "),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],p(dados[i,1])],i,1,length(dados)),
    Xdados:create_list(dados[i,1],i,1,length(dados)),
    estimativa:[[chi,p(chi)]], estimativa1:[[chi,f(chi)]],
obj_list: [[discrete,Xx],p(x),f(x),[discrete,estimativa],[discrete,estimativa1]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],['y,min(f(xmin),f(chi))-.5,max(f(xmax),f(chi))+1],
[style, points, lines,lines,points,points], [color, red, blue,green,black,yellow],
        [point_type, asterisk,bullet,delta], [box,true],[axes,true],
                [legend, "Pontos da Tabela", "Polinômio Interpolador P(x)", "Função f(x)",
            "Estimativa", "Valor Exato"],
        [title, "Interpolação de Lagrange"]))$


graficospline(dados,chi):=block(print("Diretório:", maxima_tempdir),
load("interpol"),
(sp:cspline(dados)),
define(g(x),sp),
map(g,[2.3,5/7,%pi]), numer,
print(" "),
xmin:lmin(create_list(dados[i,1],i,1,length(dados))),
xmax:lmax(create_list(dados[i,1],i,1,length(dados))),
Xx:create_list([dados[i,1],g(dados[i,1])],i,1,length(dados)),
    estimativa:[[chi,g(chi)]],
obj_list: [[discrete,Xx],g(x),[discrete,estimativa]],
plot2d(obj_list,['x,min(xmin,chi)-1,max(xmax,chi)+1],
[style, points, lines,points], [color, red, blue,green],
        [point_type, asterisk,bullet], 
        [legend, "Pontos da Tabela", "Spline cúbica","Estimativa"],
        [title, "Interpolação por Spline"]))$

minquaddis(u,f,n):=block(kill(q,A,B,C,D,g,mind),
print("Diretório:", maxima_tempdir), print("Data e hora atual:", timedate()),
             print(""),
q:makelist(x^(i-1),i,1,n+1),

for i:1 thru n+1 do (g[i](x):=''q[i]),
print("Vetores:"),
for i:1 thru n+1 do print ('g[i]=g[i]:map(g[i],u)),
print("f=",f),
print(""),
print("A matriz dos coeficientes do sistema, no qual denotamos por B é"),
A[i,j]:=(sum (g[i][k]*g[j][k], k, 1, length(g[1]))),
print('B=B:genmatrix(A,n+1,n+1)),
print(""),
print("E a matriz coluna cuja cada entrada é <g_i,f> é:"),
print(""),
C[i,j]:=(sum (g[i][k]*f[k], k, 1, length(g[1]))),
print('D=D:genmatrix(C,n+1,1)),
        if (determinant(B)=0) then print("Não é possível ajustar os dados da tabela pelo polinômio dado, pois
         det(B)=0") else (
print("Solução do sistema B.X=D via eliminação de Gauss com  pivotamento parcial:"),
solve(B,D):=block([n,MA,pivo,troca],
n:length(B), MA:addcol(B,D),
for j:1 thru n-1 do (

  /*Determinamos o pivô */

  pivo:j,  
  for i:j+1 thru n do (
    if abs(MA[i,j])>abs(MA[pivo,j]) then (
       pivo:i 
    )
  ), 

  /*Permuta das linhas */

  if (pivo#j) then (
      for k:1 thru n+1 do(
          troca:MA[j,k],
          MA[j,k]:MA[pivo,k],
          MA[pivo,k]:troca
      ) 
  ), 
  /*_______________________Construção da matriz triangular superior */
  if MA[j,j]#0 then (
    for i:j+1 thru n do(
      constante:MA[i,j]/MA[j,j],
      for k:j thru n+1 do(
          MA[i,k]:MA[i,k]-constante*MA[j,k] 
      )
    )
  )         
),
sol:zeromatrix(n,1),
for i:n step -1 thru 1 do (
    soma:0,
    for k:i+1 thru n do (
        soma:soma + sol[k,1]*MA[i,k]
    ),
    sol[i,1]:(MA[i,n+1]-soma)/MA[i,i]
),
("  X= ",box(sol))),
print("X=", solve(B,D)),
mind:sum(sol[i,1]*x^(i-1),i,1,n+1),
print(""),
print("Polinômio", define(g(x),mind))
))$

graficodis(u,g):=block(print("Diretório:", maxima_userdir),
print(" "),
 p:makelist([u[i],f[i]],i,1,length(g[1])), 
obj_list: [g(x),[discrete,p]],
plot2d(obj_list,['x,u[1]-1,u[length(g[1])]+6],
[style, lines,points], [color, red, blue,green],
        [point_type, asterisk,bullet], 
        [legend,  "Função g(x)","Pontos da Tabela"],
        [title, "Metodo de Minimos quadrados (caso discreto)"])
)$


minquadcont(f,a,b,n):=block(kill(q,A,B,C,D,g,mind),
print("Diretório:", maxima_tempdir), print("Data e hora atual:", timedate()),
             print(""),
q:makelist(x^(i-1),i,1,n+1),
print(""),
for i:1 thru n+1 do (g[i]:=''q[i]),
print("A matriz dos coeficientes do sistema, no qual denotamos por B é"),
A[i,j]:=integrate(g[i]*g[j],x,a,b),
print('B=B:float(genmatrix(A,n+1,n+1))),
print(""),
print("E a matriz coluna cuja cada entrada é <g_i,f> é:"),
C[i,j]:=integrate(g[i]*f(x),x,a,b),
print('D=D:float(genmatrix(C,n+1,1))),
print(""),
print("Solução do sistema B.X=D via eliminação de Gauss com  pivotamento parcial:"),
solve(B,D):=block([n,MA,pivo,troca],
n:length(B), MA:addcol(B,D),
for j:1 thru n-1 do (

  /*Determinamos o pivô */

  pivo:j,  
  for i:j+1 thru n do (
    if abs(MA[i,j])>abs(MA[pivo,j]) then (
       pivo:i 
    )
  ), 

  /*Permuta das linhas */

  if (pivo#j) then (
      for k:1 thru n+1 do(
          troca:MA[j,k],
          MA[j,k]:MA[pivo,k],
          MA[pivo,k]:troca
      ) 
  ), 
  /*_______________________Construção da matriz triangular superior */
  if MA[j,j]#0 then (
    for i:j+1 thru n do(
      constante:MA[i,j]/MA[j,j],
      for k:j thru n+1 do(
          MA[i,k]:MA[i,k]-constante*MA[j,k] 
      )
    )
  )         
),
sol:zeromatrix(n,1),
for i:n step -1 thru 1 do (
    soma:0,
    for k:i+1 thru n do (
        soma:soma + sol[k,1]*MA[i,k]
    ),
    sol[i,1]:(MA[i,n+1]-soma)/MA[i,i]
),
("  X= ",box(sol))),
print("X=", solve(B,D)),
mind:sum(sol[i,1]*x^(i-1),i,1,n+1),
print(""),
print("Polinômio", define(g(x),mind)
))$

graficocont(f,a,b,n):=block(
print(" "),
print("Diretório:", maxima_tempdir),
obj_list: [g(x),f(x)],
plot2d(obj_list,['x,a-1,b+1],
[style, lines], [color, red, blue,green],
        [point_type, asterisk,bullet], 
        [legend,  "Função g(x)","Função f(x)"],
        [title, "Metodo de Minimos quadrados (caso contínuo)"])
)$


Gauss_parcial1(A,B):=block([n,MA],



n:length(A),



MA:addcol(A,B),



for j:1 thru n-1 do (







  /*Determinamos o pivô */







  pivo:j,  



  for i:j+1 thru n do (



    if abs(MA[i,j])>abs(MA[pivo,j]) then (



       pivo:i 



    )



  ), 







  /*Permuta das linhas */







  if (pivo#j) then (



      for k:1 thru n+1 do(



          troca:MA[j,k],



          MA[j,k]:MA[pivo,k],



          MA[pivo,k]:troca



      ) 



  ), 



  /*_______________________Construção da matriz triangular superior */



  if MA[j,j]#0 then (



    for i:j+1 thru n do(



      constante:MA[i,j]/MA[j,j],



      for k:j thru n+1 do(



          MA[i,k]:MA[i,k]-constante*MA[j,k] 



      )



    )



  )         



),



("         Matriz A=",submatrix(MA,n+1),",",  " Matriz Ampliada MA=",MA),



sol:zeromatrix(n,1),



for i:n step -1 thru 1 do (



    soma:0,



    for k:i+1 thru n do (



        soma:soma + sol[k,1]*MA[i,k]



    ),



    sol[i,1]:(MA[i,n+1]-soma)/MA[i,i]



)



)$

spline(dados):=block(kill(h,b,c,mu,M,S,T,A,B,C,L1,Lh,Lb,LL1,Lh1,Lb1,Al,Beta,Ga),
    print("Diretório:", maxima_tempdir), print("Data e hora atual:", timedate()),
             print(""),

n:length(dados),ratprint:false,
print("Valores de h_i e b_i dados pela seguinte tabela:"),
print(""),
for i:1 thru n-1 do ('i=i-1, ",",
  'h[i-1]=h[i-1]: dados[i+1,1] - dados[i,1],",",
'b[i-1]=b[i-1]:6*(dados[i+1,2]-dados[i,2])/h[i-1]),
    cabecalho1:matrix(['i,'h[i],'b[i]]),
    L1:makelist([i-1],i,1,length(dados)-1),
    Lh:makelist([h[i-1]],i,1,length(dados)-1),
    Lb:makelist([b[i-1]],i,1,n-1),
    LL1:apply('matrix,L1), Lh1:apply('matrix,Lh), Lb1:apply('matrix,Lb),
    print(addrow(cabecalho1,addcol(LL1,Lh1,Lb1))),
    
μ[0]:0, μ[n-1]:0,
create_list('y[i-1]=y[i-1]:dados[i,2],i,1,n),
c[i]:=b[i]-b[i-1],
S:create_list(h[i-1]*μ[i-1]+2*(h[i-1]+h[i])*μ[i]+h[i]*μ[i+1]=c[i],i,1,n-2),
M[0]:μ[0],
M[n-1]:0,
print(""),
print("Spline natural:", 'μ[0]=μ[0], ",", 'μ[n-1]=μ[n-1]),
print(""),
print("Sistema linear:"),
print(""),
for i:1 thru n-2 do print(S[i]),
T:makelist(μ[i],i,1,n-2),
A:float(coefmatrix(S,T)),
C[i,j]:=c[i],
B:genmatrix(C,n-2,1),
print(""),
Gauss_parcial1(A,B),
print(""),
print("Solução do sistema linear obtida via método de eliminação de Gauss:"),
print(""),
 for i:1 thru n-2 do print( 'μ[i]=M[i]:sol[i,1]),
print(""),
print("Coeficientes dos polinomios da spline:"),
print(""),
for i:0 step 1 thru n-2 do
('alpha[i]=alpha[i]:(y[i+1]-y[i])*h[i]^-1-M[i+1]*h[i]*6^-1-M[i]*h[i]*3^-1,",",'beta[i]=betta[i]:M[i]*2^-1,",",
'gamma[i]=gama[i]:(M[i+1]-M[i])*(6*h[i])^-1),
    cabecalho2:matrix(['i,'α[i],'β[i],'gamma[i]]),
    Al:makelist([alpha[i-1]],i,1,length(dados)-1),
    Beta:makelist([betta[i-1]],i,1,length(dados)-1),
    Ga:makelist([gama[i-1]],i,1,length(dados)-1),
    print(addrow(cabecalho2,addcol(apply('matrix,L1),apply('matrix,Al),apply('matrix,Beta),apply('matrix,Ga)))),
    
create_list('x[i-1]=x[i-1]:dados[i,1],i,1,n),
print(""),
print("Spline cúbica natural:"),
print(""),
for i:0 step 1 thru n-2 do
print('p[i](x)=p[i]:y[i]+alpha[i]*(x-x[i])+betta[i]*(x-x[i])^2+gama[i]*(x-x[i])^3,",","Intervalo"=I[i]:[x[i],x[i+1]])
)$

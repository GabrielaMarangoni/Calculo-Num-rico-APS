
eulermethodf(f,a,b,x0,y0,n):=(
kill(y,x),
block[h:(b-a)/n],
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
y[0]:y0,x[0]:x0,
edo:'diff(y,x)=f(x,y),
sol:ic1(ode2(edo,y,x),x=x0,y=y0),
print("Solucao analitica:", sol),
print(""),
define(g(x),rhs(sol)),
for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
print("Solução numérica obtida pelo método de Euler:"),
print(""),
for i:0 step 1 thru n-1 do ('k=k:i+1,",", float('x[i+1]=x[i+1]),",", box(float('y[i+1]=y[i+1]:y[i]+h*f(x[i],y[i]))),",",
 "erro=",e[i+1]:float(abs(y[i+1]-g(x[i+1])))),
    e[0]:0,
cabecalho1:matrix(['i,'x[i],'y[i],erro]),
    L1:makelist([i],i,0,n),
    Lx:float(makelist([x[i]],i,0,n)),
    Ly:float(makelist([y[i]],i,0,n)),
    Le:makelist([e[i]],i,0,n),
    LL1:apply('matrix,L1), Lh1:apply('matrix,Lx), Lb1:apply('matrix,Ly),Lb2:apply('matrix,Le),
    print(addrow(cabecalho1,addcol(LL1,Lh1,Lb1,Lb2))))$


eulermethod(a,b,x0,y0,n):=(
kill(y,x),
block[h:(b-a)/n],
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
y[0]:y0,x[0]:x0,

for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
print("Solução numérica obtida pelo método de Euler:"),
print(""),
for i:0 step 1 thru n-1 do ('k=k:i+1,",", float('x[i+1]=x[i+1]),",", box(float('y[i+1]=y[i+1]:y[i]+h*f(x[i],y[i])))),
cabecalho1:matrix(['i,'x[i],'y[i]]),
    L1:makelist([i],i,0,n),
    Lx:float(makelist([x[i]],i,0,n)),
    Ly:float(makelist([y[i]],i,0,n)),
    LL1:apply('matrix,L1), Lh1:apply('matrix,Lx), Lb1:apply('matrix,Ly),
    print(addrow(cabecalho1,addcol(LL1,Lh1,Lb1))))$
Eulermethod(f,a,b,x0,y0,n):=block(
if f=0 then return(eulermethod(a,b,x0,y0,n) ) else (eulermethodf(f,a,b,x0,y0,n))
)$

graficoeuler(f,a,b,x0,y0,n):=(block(pontos:makelist([float(x[i]),float(y[i])],i,0,n),
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
plot2d([[discrete, pontos], g(x)], [x,x[0],x[n]],
        [style, points, lines], [color, red, blue],
        [point_type, asterisk],
[title, "Metodo de Euler"],
        [legend, "solucao numerica", "solucao exata"])))$

rk2(f,a,b,x0,y0,n):=(block[h:(b-a)/n],
kill(y,x,k1,k2,k3,k4,L1,Lx,Ly,Lk1,Lk2),
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
        print("Data e hora atual:", timedate()),
    print(" "),
y[0]:y0,x[0]:x0,
edo:'diff(y,x)=f(x,y),
sol:ic1(ode2(edo,y,x),x=x0,y=y0),
print("Solucao analitica:", sol),
print(""),
define(g(x),rhs(sol)),
for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
print("Solução numérica obtida pelo método de Runge-Kutta de ordem 2:"),
print(""),
for i:0 step 1 thru n-1 do  ('j=k:i,",", k1[i]:float(f(x[i],y[i])),",", k2[i]:float(f(x[i+1],y[i]+h*k1[i])),
",",  box(float('y[i+1]=y[i+1]:y[i]+h*2^-1*(k1[i]+k2[i]))),",",
 "erro=",e[i+1]:float(abs(y[i+1]-g(x[i+1])))),
e[0]:0,
    k1[n]:~, k2[n]:~,
    cabecalho1:matrix(['i,'x[i],'k[1],'k[2],'y[i],erro]),
    L1:makelist([i],i,0,n),
    Lx:float(makelist([x[i]],i,0,n)),
    Ly:float(makelist([y[i]],i,0,n)),
    Lk1:float(makelist([k1[i]],i,0,n)),
    Lk2:float(makelist([k2[i]],i,0,n)),
    Le:float(makelist([e[i]],i,0,n)),
    LL1:apply('matrix,L1), Lh1:apply('matrix,Lx), Lb1:apply('matrix,Ly),LLk1:apply('matrix,Lk1),LLk2:apply('matrix,Lk2),
    LLe:apply('matrix,Le),
    print(addrow(cabecalho1,addcol(LL1,Lh1,LLk1,LLk2,Lb1,LLe)))
)$

graficork2(f,a,b,x0,y0,n):=(block(pontos:makelist([float(x[i]),float(y[i])],i,0,n),
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
plot2d([[discrete, pontos], g(x)], [x,x[0],x[n]],
        [style, points, lines], [color, red, blue],
        [point_type, asterisk],
[title, "Metodo de Runge - Kutta de ordem 2"],
        [legend, "solucao numerica", "solucao exata"])))$

rk4(f,a,b,x0,y0,n):=(block[h:(b-a)/n],
kill(y,x,k1,k2,k3,k4,L1,Lx,Ly,Lk1,Lk2),
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
        print("Data e hora atual:", timedate()),
    print(" "),
y[0]:y0,x[0]:x0,
edo:'diff(y,x)=f(x,y),
sol:ic1(ode2(edo,y,x),x=x0,y=y0),
print("Solucao analitica:", sol),
print(""),
define(g(x),rhs(sol)),
for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
print("Solução numérica obtida pelo método de Runge-Kutta de ordem 4:"),
print(""),
for i:0 step 1 thru n-1 do  ('j=j:i,",", float(k1[i]:f(x[i],y[i])),",", float(k2[i]:f(x[i]+h*2^-1,y[i]+h*2^-1*k1[i])),
",", float(k3[i]:f(x[i]+h*2^-1, y[i]+h*2^-1*k2[i])),",",
float(k4[i]:f(x[i]+h, y[i]+h*k3[i])),",", box(float('y[i+1]=y[i+1]:y[i]+h*6^-1*(k1[i]+2*k2[i]+2*k3[i]+k4[i]))),",",
e[i+1]:float(abs(y[i+1]-g(x[i+1])))),
e[0]:0,
    k1[n]:~, k2[n]:~, k3[n]:~,k4[n]:~,
    cabecalho1:matrix(['i,'x[i],'k[1],'k[2],'k[3],'k[4],'y[i],erro]),
    L1:makelist([i],i,0,n),
    Lx:float(makelist([x[i]],i,0,n)),
    Ly:float(makelist([y[i]],i,0,n)),
    Lk1:float(makelist([k1[i]],i,0,n)),
    Lk2:float(makelist([k2[i]],i,0,n)),
        Lk3:float(makelist([k3[i]],i,0,n)),
        Lk4:float(makelist([k4[i]],i,0,n)),
    Le:float(makelist([e[i]],i,0,n)),
    LL1:apply('matrix,L1), Lh1:apply('matrix,Lx), Lb1:apply('matrix,Ly),LLk1:apply('matrix,Lk1),LLk2:apply('matrix,Lk2),
    LLk3:apply('matrix,Lk3),LLk4:apply('matrix,Lk4),
    LLe:apply('matrix,Le),
    print(addrow(cabecalho1,addcol(LL1,Lh1,LLk1,LLk2,LLk3,LLk4,Lb1,LLe)))
)$

graficork4(f,a,b,x0,y0,n):=(block(pontos:makelist([float(x[i]),float(y[i])],i,0,n),
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
plot2d([[discrete, pontos], g(x)], [x,x[0],x[n]],
        [style, points, lines], [color, red, blue],
        [point_type, asterisk],
[title, "Metodo de Runge - Kutta de ordem 4"],
        [legend, "solucao numerica", "solucao exata"])))$

/* [wxMaxima: input   start ] */
rk42(a,b,m,n,y10,y20,j):=block(
        Q:create_list(create_list(kt[s,i],s,1,4),i,1,2),
    kill(Q),
    h:(b-a)/n,
    for k:0 step 1 thru n-1 do  ('x[k+1]=x[k+1]:x[k]+h),
    y[1,0]:y10,y[2,0]:y20,x[0]:a,
     for i:1 step 1 thru m do ('kt[1,i]=kt[1,i]:
        float(h*ev(f[i],x=x[j],y1=y[1,j],y2=y[2,j]))),
     for i:1 step 1 thru m do (        'k[2,i]=kt[2,i]: 
            float(h*ev(f[i],x=x[j]+h/2,y1=y[1,j]+1/2*kt[1,1],
                    y2=y[2,j]+1/2*kt[1,2]))
    ), 
for i:1 step 1 thru m do ('k[3,i]=kt[3,i]:float(h*ev(f[i],x=x[j]+h/2,y1=y[1,j]+1/2*kt[2,1],y2=y[2,j]+1/2*kt[2,2]))),
    for i:1 step 1 thru m do('k[4,i]=kt[4,i]:float(h*ev(f[i],x=x[j]+h,y1=y[1,j]+kt[3,1],y2=y[2,j]+kt[3,2])) ),
    for i:1 step 1 thru m do  (    'y[i,j+1]=y[i,j+1]:float(y[i,j]
        +1/6*(kt[1,i]+2*kt[2,i]+2*kt[3,i]+kt[4,i])) ))

$

rk4system2(a,b,m,n,y10,y20):=block(kill(A,B,C,E),
    for j:0 thru n-1 do rk42(a,b,m,n,y10,y20,j),
    A[i,j]:=y[1,i],B[i,j]:=y[2,i],
        C:addcol(genmatrix(A,n,1),genmatrix(B,n,1)),
    E:addrow(matrix([y[1,i],y[2,i]],[y[1,0],y[2,0]]),C),
print(E))$
/* [wxMaxima: input   end   ] */


rk43(a,b,m,n,y10,y20,y30,j):=block(
        Q:create_list(create_list(kt[s,i],s,1,4),i,1,m),
    kill(Q),
    h:(b-a)/n,
    for k:0 step 1 thru n-1 do  ('x[k+1]=x[k+1]:x[k]+h),
    y[1,0]:y10,y[2,0]:y20,x[0]:a,y[3,0]:y30,
     for i:1 step 1 thru m do ('k[1,i]=kt[1,i]:
        float(h*ev(f[i],x=x[j],y1=y[1,j],y2=y[2,j],y3=y[3,j]))),
     for i:1 step 1 thru m do (        'k[2,i]=kt[2,i]: 
            float(h*ev(f[i],x=x[j]+h/2,y1=y[1,j]+1/2*kt[1,1],
                    y2=y[2,j]+1/2*kt[1,2],y3=y[3,j]+1/2*kt[1,3]))
    ), 
for i:1 step 1 thru m do ('k[3,i]=kt[3,i]:float(h*ev(f[i],x=x[j]+h/2,y1=y[1,j]+1/2*kt[2,1],y2=y[2,j]+1/2*kt[2,2],
                y3=y[3,j]+1/2*kt[2,3]))),
    for i:1 step 1 thru m do('k[4,i]=kt[4,i]:float(h*ev(f[i],x=x[j]+h,y1=y[1,j]+kt[3,1],y2=y[2,j]+kt[3,2],
                y3=y[3,j]+kt[3,3])) ),
    for i:1 step 1 thru m do  (    'y[i,j+1]=y[i,j+1]:float(y[i,j]
        +1/6*(kt[1,i]+2*kt[2,i]+2*kt[3,i]+kt[4,i])) ))

$

rk4system3(a,b,m,n,y10,y20,y30):=block(kill(A,B,B1,C,E),
    for j:0 thru n-1 do rk43(a,b,m,n,y10,y20,y30,j),
    A[i,j]:=y[1,i],B[i,j]:=y[2,i],B1[i,j]:=y[3,i],
        C:addcol(genmatrix(A,n,1),genmatrix(B,n,1),genmatrix(B1,n,1)),
    E:addrow(matrix([y[1,i],y[2,i],y[3,i]],[y[1,0],y[2,0],y[3,0]]),C),
print(E))$

rk44(a,b,m,n,y10,y20,y30,y40,j):=block(
        Q:create_list(create_list(kt[s,i],s,1,4),i,1,m),
    kill(Q),
    h:(b-a)/n,
    for k:0 step 1 thru n-1 do  ('x[k+1]=x[k+1]:x[k]+h),
    y[1,0]:y10,y[2,0]:y20,x[0]:a,y[3,0]:y30, y[4,0]:y40,
     for i:1 step 1 thru m do ('k[1,i]=kt[1,i]:
        float(h*ev(f[i],x=x[j],y1=y[1,j],y2=y[2,j],y3=y[3,j],y4=y[4,j]))),
     for i:1 step 1 thru m do (        'k[2,i]=kt[2,i]: 
            float(h*ev(f[i],x=x[j]+h/2,y1=y[1,j]+1/2*kt[1,1],
                    y2=y[2,j]+1/2*kt[1,2],y3=y[3,j]+1/2*kt[1,3],y4=y[4,j]+1/2*kt[1,4]))
    ), 
for i:1 step 1 thru m do ('k[3,i]=kt[3,i]:float(h*ev(f[i],x=x[j]+h/2,y1=y[1,j]+1/2*kt[2,1],y2=y[2,j]+1/2*kt[2,2],
                y3=y[3,j]+1/2*kt[2,3],y4=y[4,j]+1/2*kt[2,4]))),
    for i:1 step 1 thru m do('k[4,i]=kt[4,i]:float(h*ev(f[i],x=x[j]+h,y1=y[1,j]+kt[3,1],y2=y[2,j]+kt[3,2],
                y3=y[3,j]+kt[3,3],y4=y[4,j]+kt[3,4])) ),
    for i:1 step 1 thru m do  (    'y[i,j+1]=y[i,j+1]:float(y[i,j]
        +1/6*(kt[1,i]+2*kt[2,i]+2*kt[3,i]+kt[4,i])) ))

$

rk4system4(a,b,m,n,y10,y20,y30,y40):=block(kill(A,B,B1,B2,C,E),
    for j:0 thru n-1 do rk44(a,b,m,n,y10,y20,y30,y40,j),
    A[i,j]:=y[1,i],B[i,j]:=y[2,i],B1[i,j]:=y[3,i], B2[i,j]:=y[4,i],
        C:addcol(genmatrix(A,n,1),genmatrix(B,n,1),genmatrix(B1,n,1),genmatrix(B2,n,1)),
    E:addrow(matrix([y[1,i],y[2,i],y[3,i],y[4,i]],[y[1,0],y[2,0],y[3,0],y[4,0]]),C),
print(E))$

rk4system(a,b,m,n):=

block(kill(y), ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
print("Tabela contendo as aproximações", makelist(y[l,i],l,1,m),":"),
print(" "),
if m=2 then return(rk4system2(a,b,m,n,y10,y20)),
    if m=3 then return(rk4system3(a,b,m,n,y10,y20,y30)),
if m=4 then return(rk4system4(a,b,m,n,y10,y20,y30,y40)))$


eulersystem(f,a,b,n,o):=(block[h:(b-a)/n],
 ratprint:false,
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
kill(X,C,Y,F), /*vou anular os valores anteriores */
    x[0]:a, /*defino x[0] como a */
X[i,j]:=Y0[i], /* defino a matriz X como sendo cada entrada de Y0, pois quero manipular cada entrada de Y0 */
Y[0]:genmatrix(X,o,1), /* vou gerar a matriz Y_0 a partir de X de ordem "o" */
for i:0 step 1 thru n-1 do  ('x[i+1]=x[i+1]:x[i]+h), /* neste laço, obtenho os valores de x_i's */
C[i,j]:=p[i,x[r]], /* para usar os x_i's acima em cada entrada da matrix Y, defino esta matriz auxiliar */
Y:genmatrix(C,o,1), /*defino a matriz almejada Y gerada a partir de C */
Y[s]:=ev(Y,r=s), /*eu não consegui fazer no WxMaxima uma função dada por matriz, tipo f(x):=matrix([x], [x^2]), por 
    exemplo, então o comando "ev" avalia a matriz Y no ponto r=s */
F[i]:=addrow(submatrix(1,Y[i]),f(x[i])), /* A matriz F é obtida da matriz Y extraindo a primeira linha (por isso o comando
        "submatrix") e addrow adiciona esta nova matriz a função f(x_i) */
    print('Y^[0]=Y[0]),
for i:0 thru n-1 do 
(F[i]:=addrow(submatrix(1,Y[i]),f(i)),
Y[i+1]:Y[i]+h*F[i],
        print('Y^[i+1]=Y[i+1]))
)$

/* [wxMaxima: input   start ] */
eulersystem2(a,b,y10,y20,m,n):=(block[h:(b-a)/n],
 ratprint:false,
    Kill(R,Y),
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
    print("Solução numérica do sistema dado:"),
    print(" "),
    y1[0]:y10,y2[0]:y20,x[0]:a,
for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
for i:0 step 1 thru n-1 do  (
         box(float('y1[i+1]=y1[i+1]:y1[i]+h*ev(f[1],x=x[i],y1=y1[i],y2=y2[i]))),
                 box(float('y2[i+1]=y2[i+1]:y2[i]+h*ev(f[2],x=x[i],y1=y1[i],y2=y2[i])))
),
    R:create_list([y1[i],y2[i]],i,0,n),
    for i:0 thru n do print('Y[i]=Y[i]:float(transpose(apply(matrix,[R[i+1]]))))
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
eulersystem3(a,b,y10,y20,y30,m,n):=(block[h:(b-a)/n],
 ratprint:false,
    Kill(R,Y),
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
    print("Solução numérica do sistema dado:"),
    print(" "),
    y1[0]:y10,y2[0]:y20,y3[0]:y30,x[0]:a,
for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
for i:0 step 1 thru n-1 do  (
         box(float('y1[i+1]=y1[i+1]:y1[i]+h*ev(f[1],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i]))),
                 box(float('y2[i+1]=y2[i+1]:y2[i]+h*ev(f[2],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i]))),
                         box(float('y3[i+1]=y3[i+1]:y3[i]+h*ev(f[3],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i]))))
,
    R:create_list([y1[i],y2[i],y3[i]],i,0,m),
    for i:0 thru n do print('Y[i]=Y[i]:float(transpose(apply(matrix,[R[i+1]]))))
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eulersystem4(a,b,y10,y20,y30,y40,m,n):=(block[h:(b-a)/n],
 ratprint:false,
    Kill(R,Y),
print(" "),
print("Diretório:", maxima_tempdir),
    print("Data e hora atual:", timedate()),
    print(" "),
    print("Solução numérica do sistema dado:"),
    print(" "),
    y1[0]:y10,y2[0]:y20,y3[0]:y30,x[0]:a, y4[0]:y40,
for i:0 step 1 thru n-1 do  (x[i+1]:x[i]+h),
for i:0 step 1 thru n-1 do  (
         box(float('y1[i+1]=y1[i+1]:y1[i]+h*ev(f[1],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i],y4=y4[i]))),
                 box(float('y2[i+1]=y2[i+1]:y2[i]+h*ev(f[2],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i],y4=y4[i]))),
                         box(float('y3[i+1]=y3[i+1]:y3[i]+h*ev(f[3],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i],y4=y4[i]))),
                                     box(float('y4[i+1]=y4[i+1]:y4[i]+h*ev(f[4],x=x[i],y1=y1[i],y2=y2[i],y3=y3[i],y4=y4[i]))))
,
    R:create_list([y1[i],y2[i],y3[i],y4[i]],i,0,n),
    for i:0 thru n do print('Y[i]=Y[i]:float(transpose(apply(matrix,[R[i+1]]))))
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Eulersystem(a,b,m,n):=

block(kill(y), 

if m=2 then return(eulersystem2(a,b,y10,y20,m,n)),
    if m=3 then return(eulersystem3(a,b,y10,y20,y30,m,n)),
if m=4 then return(eulersystem4(a,b,y10,y20,y30,y40,m,n)))$
/* [wxMaxima: input   end   ] */

